// import 'package:flutter_local_notifications/flutter_local_notifications.dart';
// import 'package:permission_handler/permission_handler.dart';
import '../../data/models/notification_model.dart';
import '../../presentation/providers/notification_provider.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class NotificationService {
  // static final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  static bool _initialized = false;

  static Future<void> initialize() async {
    if (_initialized) return;
    // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a notification plugin
    print('NotificationService initialized (without push notifications)');
    _initialized = true;
  }

  static Future<void> _requestPermissions() async {
    // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a permission request
    print('Permission request bypassed');
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o ngay l·∫≠p t·ª©c (t·∫°m th·ªùi v√¥ hi·ªáu h√≥a push notification)
  static Future<void> showNotification({
    required String title,
    required String message,
    required NotificationType type,
    String? data,
  }) async {
    // T·∫°m th·ªùi b·ªè qua push notification ƒë·ªÉ tr√°nh l·ªói plugin
    // Ch·ªâ l∆∞u v√†o database
    print('Notification: $title - $message');
  }

  // T·∫°o th√¥ng b√°o c·∫£nh b√°o v∆∞·ª£t ng√¢n s√°ch
  static Future<void> createBudgetOverAlert({
    required Ref ref,
    required String category,
    required double budgetAmount,
    required double spentAmount,
  }) async {
    final overAmount = spentAmount - budgetAmount;
    final title = 'V∆∞·ª£t ng√¢n s√°ch: $category';
    final message = 'B·∫°n ƒë√£ chi v∆∞·ª£t ${_formatCurrency(overAmount)} so v·ªõi ng√¢n s√°ch ${_formatCurrency(budgetAmount)}';

    // Hi·ªÉn th·ªã push notification
    await showNotification(
      title: title,
      message: message,
      type: NotificationType.budgetAlert,
    );

    // L∆∞u v√†o database
    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.budgetAlert,
      data: '{"category": "$category", "budgetAmount": $budgetAmount, "spentAmount": $spentAmount}',
    );
  }

  // T·∫°o th√¥ng b√°o c·∫£nh b√°o s·∫Øp v∆∞·ª£t ng√¢n s√°ch
  static Future<void> createBudgetWarning({
    required Ref ref,
    required String category,
    required double budgetAmount,
    required double spentAmount,
  }) async {
    final percentage = (spentAmount / budgetAmount * 100).round();
    final remaining = budgetAmount - spentAmount;
    final title = 'C·∫£nh b√°o ng√¢n s√°ch: $category';
    final message = 'ƒê√£ s·ª≠ d·ª•ng $percentage% ng√¢n s√°ch. C√≤n l·∫°i ${_formatCurrency(remaining)}';

    await showNotification(
      title: title,
      message: message,
      type: NotificationType.budgetAlert,
    );

    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.budgetAlert,
      data: '{"category": "$category", "budgetAmount": $budgetAmount, "spentAmount": $spentAmount, "percentage": $percentage}',
    );
  }

  // T·∫°o th√¥ng b√°o ho√†n th√†nh m·ª•c ti√™u
  static Future<void> createGoalAchieved({
    required Ref ref,
    required String goalName,
    required double targetAmount,
  }) async {
    final title = 'Ch√∫c m·ª´ng! üéâ';
    final message = 'B·∫°n ƒë√£ ho√†n th√†nh m·ª•c ti√™u "$goalName" v·ªõi s·ªë ti·ªÅn ${_formatCurrency(targetAmount)}';

    await showNotification(
      title: title,
      message: message,
      type: NotificationType.achievement,
    );

    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.achievement,
      data: '{"goalName": "$goalName", "targetAmount": $targetAmount}',
    );
  }

  // T·∫°o th√¥ng b√°o ti·∫øn ƒë·ªô m·ª•c ti√™u
  static Future<void> createGoalProgress({
    required Ref ref,
    required String goalName,
    required double currentAmount,
    required double targetAmount,
    required int milestonePercent, // 25%, 50%, 75%
  }) async {
    final title = 'Ti·∫øn ƒë·ªô m·ª•c ti√™u: $goalName';
    final message = 'B·∫°n ƒë√£ ƒë·∫°t $milestonePercent% m·ª•c ti√™u (${_formatCurrency(currentAmount)}/${_formatCurrency(targetAmount)})';

    await showNotification(
      title: title,
      message: message,
      type: NotificationType.goalProgress,
    );

    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.goalProgress,
      data: '{"goalName": "$goalName", "currentAmount": $currentAmount, "targetAmount": $targetAmount, "percentage": $milestonePercent}',
    );
  }

  // T·∫°o th√¥ng b√°o chi ti√™u l·ªõn
  static Future<void> createLargeExpenseAlert({
    required Ref ref,
    required double amount,
    required String category,
    required double monthlyAverage,
  }) async {
    final title = 'Chi ti√™u l·ªõn ƒë∆∞·ª£c ghi nh·∫≠n';
    final message = 'Giao d·ªãch ${_formatCurrency(amount)} cho $category v∆∞·ª£t m·ª©c trung b√¨nh th√°ng (${_formatCurrency(monthlyAverage)})';

    await showNotification(
      title: title,
      message: message,
      type: NotificationType.transactionReminder,
    );

    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.transactionReminder,
      data: '{"amount": $amount, "category": "$category", "monthlyAverage": $monthlyAverage}',
    );
  }

  // T·∫°o th√¥ng b√°o nh·∫Øc nh·ªü cu·ªëi th√°ng
  static Future<void> createMonthlyReminder({
    required Ref ref,
    required double totalIncome,
    required double totalExpense,
    required double savings,
  }) async {
    final title = 'T·ªïng k·∫øt th√°ng';
    final message = 'Thu nh·∫≠p: ${_formatCurrency(totalIncome)}, Chi ti√™u: ${_formatCurrency(totalExpense)}, Ti·∫øt ki·ªám: ${_formatCurrency(savings)}';

    await showNotification(
      title: title,
      message: message,
      type: NotificationType.general,
    );

    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.general,
      data: '{"totalIncome": $totalIncome, "totalExpense": $totalExpense, "savings": $savings}',
    );
  }

  // T·∫°o th√¥ng b√°o khuy·∫øn kh√≠ch ti·∫øt ki·ªám
  static Future<void> createSavingEncouragement({
    required Ref ref,
    required int daysWithoutExpense,
    required double savedAmount,
  }) async {
    final title = 'Tuy·ªát v·ªùi! üí™';
    final message = 'B·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c ${_formatCurrency(savedAmount)} trong $daysWithoutExpense ng√†y qua';

    await showNotification(
      title: title,
      message: message,
      type: NotificationType.achievement,
    );

    await ref.read(notificationControllerProvider.notifier).createNotification(
      title: title,
      message: message,
      type: NotificationType.achievement,
      data: '{"daysWithoutExpense": $daysWithoutExpense, "savedAmount": $savedAmount}',
    );
  }

  // Helper method ƒë·ªÉ format currency
  static String _formatCurrency(double amount) {
    if (amount >= 1000000) {
      return '${(amount / 1000000).toStringAsFixed(1)}M‚Ç´';
    } else if (amount >= 1000) {
      return '${(amount / 1000).toStringAsFixed(1)}K‚Ç´';
    } else {
      return '${amount.toStringAsFixed(0)}‚Ç´';
    }
  }

  // Ki·ªÉm tra quy·ªÅn th√¥ng b√°o (t·∫°m th·ªùi tr·∫£ v·ªÅ true)
  static Future<bool> hasNotificationPermission() async {
    return true;
  }

  // Y√™u c·∫ßu quy·ªÅn th√¥ng b√°o (t·∫°m th·ªùi tr·∫£ v·ªÅ true)
  static Future<bool> requestNotificationPermission() async {
    return true;
  }
}